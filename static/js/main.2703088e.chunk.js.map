{"version":3,"sources":["App.js","useDarkMode.js","serviceWorker.js","webpack:///./src/index.js?b635"],"names":["App","Search","Input","useState","load","setLoad","alert","showAlert","mathData","setMathData","triviaData","setTriviaData","dateData","setDateData","theme","setTheme","dark","setDark","useEffect","localTheme","window","localStorage","getItem","setItem","useDarkMode","toggleTheme","searchItem","e","a","axios","get","parseInt","then","response","data","catch","err","console","log","style","textAlign","minHeight","background","color","paddingBottom","fontFamily","fontWeight","marginBottom","fontSize","paddingTop","width","placeholder","onSearch","value","margin","spinning","display","flexDirection","justifyContent","message","type","showIcon","marginLeft","marginRight","backgroundImage","boxShadow","borderRadius","padding","onChange","checked","size","opacity","href","shape","icon","Boolean","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.2703088e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Input, Button } from \"antd\";\nimport \"./App.css\";\nimport { Divider, Spin, Alert } from \"antd\";\nimport axios from \"axios\";\nimport useDarkMode from \"./useDarkMode\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport { AiOutlineTwitter } from \"react-icons/ai\";\n\nfunction App() {\n  const { Search } = Input;\n  const [load, setLoad] = useState(false);\n  const [alert, showAlert] = useState(false);\n  const [mathData, setMathData] = useState(\"\");\n  const [triviaData, setTriviaData] = useState(\"\");\n  const [dateData, setDateData] = useState(\"\");\n  const [theme, toggleTheme, dark] = useDarkMode();\n\n  const searchItem = async e => {\n    if (e) {\n      setLoad(true);\n      showAlert(false);\n      await axios\n        .get(`http://numbersapi.com/${parseInt(e)}/math`)\n        .then(response => {\n          setMathData(response.data);\n        })\n        .catch(err => console.log(err));\n\n      await axios\n        .get(`http://numbersapi.com/${parseInt(e)}`)\n        .then(response => {\n          setTriviaData(response.data);\n        })\n        .catch(err => console.log(err));\n\n      await axios\n        .get(`http://numbersapi.com/${parseInt(e)}/date`)\n        .then(response => {\n          setDateData(response.data);\n          setLoad(false);\n        })\n        .catch(err => console.log(err));\n    } else {\n      showAlert(true);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        textAlign: \"center\",\n        minHeight: \"100vh\",\n        background: theme === \"dark\" ? \"#000\" : \"#fff\",\n        color: theme === \"dark\" ? \"#fff\" : \"#000\",\n        paddingBottom: 20\n      }}>\n      <h1\n        style={{\n          fontFamily: \"Open sans\",\n          fontWeight: 800,\n          paddingBottom: 0,\n          marginBottom: 0,\n          fontSize: 20,\n          paddingTop: 10,\n          color: theme === \"dark\" ? \"#fff\" : \"#000\"\n        }}>\n        Number Facts\n      </h1>\n      {/* <h3 style={{ color: theme === \"dark\" ? \"#fff\" : \"#000\" }}>\n        Any Number, Many Facts\n      </h3> */}\n      <Divider />\n      <div style={{ width: \"100%\" }}>\n        <Search\n          placeholder=\"input search text\"\n          onSearch={value => searchItem(value)}\n          style={{\n            width: \"80%\",\n            fontFamily: \"Open sans\",\n            fontWeight: \"800\",\n            color: theme === \"dark\" ? \"#fff\" : \"#000\"\n          }}\n        />\n      </div>\n      <Spin style={{ margin: 20 }} spinning={load} />\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          margin: 20\n        }}>\n        {alert ? (\n          <Alert message=\"search can't be empty\" type=\"error\" showIcon />\n        ) : null}\n      </div>\n      {mathData && triviaData && dateData ? (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\"\n          }}>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              width: \"80%\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              backgroundImage:\n                \"linear-gradient(to right, #667eea 0%, #764ba2 100%)\",\n              boxShadow: theme === \"dark\" ? null : \"3px 3px 5px lightgray\",\n              borderRadius: 4,\n              padding: 5,\n              marginBottom: 20\n            }}>\n            <h3 style={{ color: \"white\", fontWeight: \"bold\" }}>Math Fact</h3>\n            <h4 style={{ color: \"white\" }}>{mathData}</h4>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              width: \"80%\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              backgroundImage:\n                \"linear-gradient(to right, #f78ca0 0%, #f9748f 19%, #fd868c 60%, #fe9a8b 100%)\",\n              boxShadow: theme === \"dark\" ? null : \"3px 3px 5px lightgray\",\n              borderRadius: 4,\n              padding: 5,\n              marginBottom: 20\n            }}>\n            <h3 style={{ color: \"white\", fontWeight: \"bold\" }}>Trivia Fact</h3>\n            <h4 style={{ color: \"white\" }}>{triviaData}</h4>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              width: \"80%\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              backgroundImage:\n                \"linear-gradient(to right, #0ba360 0%, #3cba92 100%)\",\n              borderRadius: 4,\n              padding: 5,\n              marginBottom: 20,\n              boxShadow: theme === \"dark\" ? null : \"3px 3px 5px lightgray\"\n            }}>\n            <h3 style={{ color: \"white\", fontWeight: \"bold\" }}>Date Fact</h3>\n            <h4 style={{ color: \"white\" }}>{dateData}</h4>\n          </div>\n        </div>\n      ) : null}\n\n      <div\n        style={{\n          marginLeft: \"auto\",\n          marginRight: \"auto\"\n        }}>\n        <DarkModeToggle onChange={toggleTheme} checked={dark} size=\"80px\" />\n      </div>\n      <div>\n        <h1\n          style={{\n            fontSize: 15,\n            opacity: 1,\n            fontWeight: \"bold\",\n            color: theme === \"dark\" ? \"#fff\" : \"#000\"\n          }}>\n          Follow Me\n        </h1>\n        <a href=\"https://twitter.com/PrataManitej\">\n          <Button\n            shape=\"round\"\n            type=\"ghost\"\n            icon={\n              <AiOutlineTwitter\n                style={{\n                  paddingTop: 5,\n                  color: theme === \"dark\" ? \"#fff\" : \"#000\"\n                }}\n                size={20}\n              />\n            }></Button>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\n\r\nexport default () => {\r\n  const [theme, setTheme] = useState(\"light\");\r\n  const [dark, setDark] = useState(false);\r\n\r\n  const toggleTheme = () => {\r\n    if (theme === \"light\") {\r\n      window.localStorage.setItem(\"theme\", \"dark\");\r\n      setTheme(\"dark\");\r\n      setDark(true);\r\n    } else {\r\n      window.localStorage.setItem(\"theme\", \"light\");\r\n      setTheme(\"light\");\r\n      setDark(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const localTheme = window.localStorage.getItem(\"theme\");\r\n    if (localTheme) {\r\n      setTheme(localTheme);\r\n    }\r\n  }, []);\r\n\r\n  return [theme, toggleTheme, dark];\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}